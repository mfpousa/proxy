'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _url = require('url');

var _caw = require('caw');

var _caw2 = _interopRequireDefault(_caw);

var _isomorphicFetch = require('isomorphic-fetch');

var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var omniFetch = function omniFetch(url) {
	var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	// Respect explicitly passed agents
	if (options.agent) {
		return (0, _isomorphicFetch2.default)(url, options);
	}

	// Get proxy agent depending on url and env configuration
	var agent = createProxyAgent(url);
	var amendment = agent ? { agent: agent } : {};

	// Inject agent option if applicable
	return (0, _isomorphicFetch2.default)(url, _extends({}, options, amendment));
};

// Be nice to typescript consumers
omniFetch.default = omniFetch;
exports.default = omniFetch;

/**
 * Obtain a suitable proxy agent depending on environemt variables and url
 * @param {string} url to get a suitable agent for
 * @type {Object|null} agent suitable for application of current proxy settings,
 * null if no proxy settings were given for the current protocol
 */

function createProxyAgent(url) {
	// Determine environemt variable names to search for
	var _parse = (0, _url.parse)(url),
	    protocol = _parse.protocol;

	var protocolName = protocol.replace(':', '');
	var envNames = [protocolName + '_proxy', (protocolName + '_proxy').toUpperCase()];

	// Check if proxy is configured for current url protocol
	var enabled = envNames.find(function (envName) {
		return process.env[envName];
	});

	// Return suitable proxy agent, null of none configured
	return enabled ? (0, _caw2.default)({ protocol: protocolName }) : null;
}
module.exports = exports['default'];